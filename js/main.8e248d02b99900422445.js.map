{"version":3,"sources":["webpack:///js/main.8e248d02b99900422445.js","webpack:///./src/pages/main/js/main.js","webpack:///./src/lib/modernizr.js?2813","webpack:///./src/lib/modernizr.js","webpack:///./src/pages/main/js/news.js"],"names":["webpackJsonp","module","__webpack_exports__","__webpack_require__","onWindowScroll","window","innerWidth","$","scrollTop","navbarTop","navbar","addClass","removeClass","data","toggleMobileNavLinks","applyWaypointAnimate","selector","animateClass","offset","waypoint","handler","direction","this","element","e","preventDefault","stop","slideToggle","duration","start","a","toggleState","menuIcon","text","hasClass","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_animate_css__","__WEBPACK_IMPORTED_MODULE_1_materialize_css_dist_css_materialize_min_css__","n","__WEBPACK_IMPORTED_MODULE_2__main_scss__","__WEBPACK_IMPORTED_MODULE_3__lib_modernizr_js__","__WEBPACK_IMPORTED_MODULE_4_materialize_css_dist_js_materialize_min_js__","__WEBPACK_IMPORTED_MODULE_5_waypoints_lib_jquery_waypoints_min_js__","__WEBPACK_IMPORTED_MODULE_6__news_js__","addEventListener","Modernizr","touchevents","top","newsList","i","length","title","link","readmore","append","date","content","on","filter","hash","match","targetTop","animate","easing","complete","location","exports"],"mappings":"AAAAA,cAAc,IACP,CACA,CACA,CAED,SAAUC,EAAQC,EAAqBC,GAE7C,YCoFA,SAASC,KACWC,OAAOC,WACdC,EAAE,OACTA,GAAEF,QAAQG,YAAcC,EAC1BC,EAAOC,SAAS,gBAEhBD,EAAOE,YAAY,gBAGjBL,EAAE,eAAeM,KAAK,WACxBC,IAIJ,QAASC,GAAsBC,EAAUC,EAAcC,GACrDA,EAASA,GAAU,MACnBX,EAAES,GAAUG,UACVC,QAAS,SAASC,GAChBd,EAAEe,KAAKC,SAASZ,SAAS,YAAcM,IAEzCC,OAAQA,IAIZ,QAASJ,GAAqBU,GACxBA,GACFA,EAAEC,iBAGJlB,EAAE,eAAemB,OACjBnB,EAAE,eAAeoB,aACfC,SAAU,IACVC,MAAO,SAASC,GACd,GAAIC,GAAcxB,EAAEe,MAAMT,KAAK,SAC/BkB,IAAcA,EACdxB,EAAEe,MAAMT,KAAK,SAAUkB,EAEvB,IAAIC,GAAWzB,EAAE,uBACbwB,GACFC,EAASC,KAAK,KAEdD,EAASC,KAAK,KAGZF,IAAgBrB,EAAOwB,SAAS,iBAClCxB,EAAOC,SAAS,iBAGboB,GAAexB,EAAEF,QAAQG,aAAeC,GAC3CC,EAAOE,YAAY,mBDpI3BuB,OAAOC,eAAelC,EAAqB,cAAgBmC,OAAO,GAC7C,IAAIC,GAA4CnC,EAAoB,GAEhEoC,GADoDpC,EAAoBqC,EAAEF,GACGnC,EAAoB,IAEjGsC,GADqFtC,EAAoBqC,EAAED,GAChEpC,EAAoB,IAE/DuC,GADmDvC,EAAoBqC,EAAEC,GACvBtC,EAAoB,IAEtEwC,GAD0DxC,EAAoBqC,EAAEE,GACLvC,EAAoB,IAE/FyC,GADmFzC,EAAoBqC,EAAEG,GACnCxC,EAAoB,IAE1F0C,GAD8E1C,EAAoBqC,EAAEI,GAC3DzC,EAAoB,ICZtFE,QAAOyC,iBAAiB,SAAU1C,GAM9B2C,UAAUC,aACZzC,EAAE,QAAQI,SAAS,SAUrB,KAAK,GALDD,GAASH,EAAE,aACXE,EAAYC,EAAOQ,SAAS+B,IAC5BC,EAAW3C,EAAE,cAGR4C,EAAI,EAAGA,EAAIN,EAAA,EAAKO,OAAQD,IAAK,CACpC,GAAIX,GAAIK,EAAA,EAAKM,GAITE,EAAQb,EAAEc,KAAF,YAAqBd,EAAEc,KAAvB,qBAAgDd,EAAEa,MAAlD,OAAgEb,EAAEa,MAC1EE,EAAW,EACXf,GAAEc,OACJC,cAAuBf,EAAEc,KAAzB,kDAGFJ,EAASM,OAAT,sIAI2DhB,EAAEiB,KAJ7D,6CAOUJ,EAPV,mBAQSb,EAAEkB,QARX,kBASSH,EATT,uBAeFhD,EAAE,oBAAoBoD,GAAG,QAAS7C,GAClCP,EAAE,uBAAuBoD,GAAG,QAAS7C,GAGrCP,EAAE,gBACCqD,OAAO,WACN,MAAOtC,MAAKuC,KAAKC,MAAM,WAExBH,GAAG,QAAS,SAASnC,GACpBA,EAAEC,gBAEF,IAAIoC,GAAOvC,KAAKuC,KACZE,EAAYxD,EAAEsD,GAAM3C,SAAS+B,GAGjC1C,GAAE,cAAcmB,OAAOsC,SACrBxD,UAAWuD,IAEXnC,SAAU,IACVqC,OAAQ,eACRpC,MAAO,aAEPqC,SAAU,WACR7D,OAAO8D,SAASN,KAAOA,OAM/B9C,EAAqB,cAAe,UACpCA,EAAqB,iBAAkB,YACvCA,EAAqB,mBAAoB,cACzCA,EAAqB,mBAAoB,cACzCA,EAAqB,oBAAqB,gBDkEnC,CAED,SAAUd,EAAQmE,KAMlB,SAAUnE,EAAQmE,EAASjE,GE/JjCA,EAAA,GAAAA,EAAA,KFqKM,SAAUF,EAAQmE,GGrKxBnE,EAAAmE,QAAA,8hiBH0KO,CACA,CAED,SAAUnE,EAAQC,EAAqBC,GAE7C,YI/KAD,GAAA,IAEIuD,KAAM,aACNJ,4FACAK,4LAGAJ,KAAM,0CAGNG,KAAM,aACNJ,mBACAK,gNAGAJ,KAAM,sDJ8KP","file":"js/main.8e248d02b99900422445.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */,\n/* 1 */,\n/* 2 */,\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_animate_css__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_animate_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_animate_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_materialize_css_dist_css_materialize_min_css__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_materialize_css_dist_css_materialize_min_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_materialize_css_dist_css_materialize_min_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__main_scss__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__main_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__main_scss__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_modernizr_js__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_modernizr_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__lib_modernizr_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_materialize_css_dist_js_materialize_min_js__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_materialize_css_dist_js_materialize_min_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_materialize_css_dist_js_materialize_min_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_waypoints_lib_jquery_waypoints_min_js__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_waypoints_lib_jquery_waypoints_min_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_waypoints_lib_jquery_waypoints_min_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__news_js__ = __webpack_require__(10);\n\n\n\n\n\n\n\n\nwindow.addEventListener('scroll', onWindowScroll);\n\n// detect mobile device\n// If it is mobile, then rewrite the cover background image style \n// to 'background-attachment: scroll' because mobile device does not support it.\n// see https://stackoverflow.com/a/31445503/8731544\nif (Modernizr.touchevents) {\n  $('body').addClass('mobile');\n  // console.log('Modernizr', Modernizr);\n}\n\nvar navbar = $('#main-nav');\nvar navbarTop = navbar.offset().top;\nvar newsList = $('.news-list');\n\n// generate news content\nfor (var i = 0; i < __WEBPACK_IMPORTED_MODULE_6__news_js__[\"a\" /* default */].length; i++) {\n  var n = __WEBPACK_IMPORTED_MODULE_6__news_js__[\"a\" /* default */][i];\n  // var fadeClass = i % 2 === 0 ? 'wp-fade-in-left' : 'wp-fade-in-right';\n  var fadeClass = '';\n\n  var title = n.link ? '<a href=\"' + n.link + '\" target=\"_blank\">' + n.title + '</a>' : n.title;\n  var readmore = '';\n  if (n.link) {\n    readmore = '<a href=\"' + n.link + '\" rel=\"nofollow\" target=\"_blank\">Read more</a>';\n  }\n\n  newsList.append('\\n    <li class=\"news-item ' + fadeClass + '\">\\n      <p>\\n        <small class=\"date\">\\n          <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> ' + n.date + '\\n        </small>\\n      </p>\\n      <h5>' + title + '</h5>\\n      <p>' + n.content + '</p>\\n      <p>' + readmore + '</p>\\n    </li>\\n  ');\n}\n\n// attach click to toggle mobile navigation menu.\n$('.button-collapse').on('click', toggleMobileNavLinks);\n$('.mobile-nav-menu li').on('click', toggleMobileNavLinks);\n\n// attach click event to scroll page smoothly for each anchor element which havae hash href.\n$('a[href^=\"#\"]').filter(function () {\n  return this.hash.match(/^#.+$/);\n}).on('click', function (e) {\n  e.preventDefault();\n\n  var hash = this.hash;\n  var targetTop = $(hash).offset().top;\n  // targetTop -= navbar.height();\n\n  $('html, body').stop().animate({\n    scrollTop: targetTop\n  }, {\n    duration: 600,\n    easing: 'easeOutCubic',\n    start: function start() {},\n    complete: function complete() {\n      window.location.hash = hash;\n    }\n  });\n});\n\n// apply scrolling animations\napplyWaypointAnimate('.wp-fade-in', 'fadeIn');\napplyWaypointAnimate('.wp-fade-in-up', 'fadeInUp');\napplyWaypointAnimate('.wp-fade-in-down', 'fadeInDown');\napplyWaypointAnimate('.wp-fade-in-left', 'fadeInLeft');\napplyWaypointAnimate('.wp-fade-in-right', 'fadeInRight');\n\n// functions----------------------------------------------------------------\n\nfunction onWindowScroll() {\n  var windowWidth = window.innerWidth;\n  var body = $('html');\n  if ($(window).scrollTop() > navbarTop) {\n    navbar.addClass('navbar-fixed');\n  } else {\n    navbar.removeClass('navbar-fixed');\n  }\n\n  if ($('#mobile-nav').data('toggle')) {\n    toggleMobileNavLinks();\n  }\n}\n\nfunction applyWaypointAnimate(selector, animateClass, offset) {\n  offset = offset || '70%';\n  $(selector).waypoint({\n    handler: function handler(direction) {\n      $(this.element).addClass('animated ' + animateClass);\n    },\n    offset: offset\n  });\n};\n\nfunction toggleMobileNavLinks(e) {\n  if (e) {\n    e.preventDefault();\n  }\n\n  $('#mobile-nav').stop();\n  $('#mobile-nav').slideToggle({\n    duration: 200,\n    start: function start(a) {\n      var toggleState = $(this).data('toggle');\n      toggleState = toggleState ? false : true;\n      $(this).data('toggle', toggleState);\n\n      var menuIcon = $('.button-collapse > i');\n      if (toggleState) {\n        menuIcon.text('\\uE5CD');\n      } else {\n        menuIcon.text('\\uE5D2');\n      }\n\n      if (toggleState && !navbar.hasClass('navbar-fixed')) {\n        navbar.addClass('navbar-fixed');\n      }\n\n      if (!toggleState && $(window).scrollTop() <= navbarTop) {\n        navbar.removeClass('navbar-fixed');\n      }\n    }\n  });\n}\n\n/***/ }),\n/* 4 */,\n/* 5 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(1)(__webpack_require__(7))\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"var _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*!\\n * modernizr v3.5.0\\n * Build https://modernizr.com/download?-touchevents-dontmin\\n *\\n * Copyright (c)\\n *  Faruk Ates\\n *  Paul Irish\\n *  Alex Sexton\\n *  Ryan Seddon\\n *  Patrick Kettner\\n *  Stu Cox\\n *  Richard Herrera\\n\\n * MIT License\\n */\\n\\n/*\\n * Modernizr tests which native CSS3 and HTML5 features are available in the\\n * current UA and makes the results available to you in two ways: as properties on\\n * a global `Modernizr` object, and as classes on the `<html>` element. This\\n * information allows you to progressively enhance your pages with a granular level\\n * of control over the experience.\\n*/\\n\\n;(function (window, document, undefined) {\\n  var tests = [];\\n\\n  /**\\n   *\\n   * ModernizrProto is the constructor for Modernizr\\n   *\\n   * @class\\n   * @access public\\n   */\\n\\n  var ModernizrProto = {\\n    // The current version, dummy\\n    _version: '3.5.0',\\n\\n    // Any settings that don't work as separate modules\\n    // can go in here as configuration.\\n    _config: {\\n      'classPrefix': '',\\n      'enableClasses': true,\\n      'enableJSClass': true,\\n      'usePrefixes': true\\n    },\\n\\n    // Queue of tests\\n    _q: [],\\n\\n    // Stub these for people who are listening\\n    on: function on(test, cb) {\\n      // I don't really think people should do this, but we can\\n      // safe guard it a bit.\\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\\n      // This is in case people listen to synchronous tests. I would leave it out,\\n      // but the code to *disallow* sync tests in the real version of this\\n      // function is actually larger than this.\\n      var self = this;\\n      setTimeout(function () {\\n        cb(self[test]);\\n      }, 0);\\n    },\\n\\n    addTest: function addTest(name, fn, options) {\\n      tests.push({ name: name, fn: fn, options: options });\\n    },\\n\\n    addAsyncTest: function addAsyncTest(fn) {\\n      tests.push({ name: null, fn: fn });\\n    }\\n  };\\n\\n  // Fake some of Object.create so we can force non test results to be non \\\"own\\\" properties.\\n  var Modernizr = function Modernizr() {};\\n  Modernizr.prototype = ModernizrProto;\\n\\n  // Leak modernizr globally when you `require` it rather than force it here.\\n  // Overwrite name so constructor name is nicer :D\\n  Modernizr = new Modernizr();\\n\\n  var classes = [];\\n\\n  /**\\n   * is returns a boolean if the typeof an obj is exactly type.\\n   *\\n   * @access private\\n   * @function is\\n   * @param {*} obj - A thing we want to check the type of\\n   * @param {string} type - A string to compare the typeof against\\n   * @returns {boolean}\\n   */\\n\\n  function is(obj, type) {\\n    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === type;\\n  }\\n  ;\\n\\n  /**\\n   * Run through all tests and detect their support in the current UA.\\n   *\\n   * @access private\\n   */\\n\\n  function testRunner() {\\n    var featureNames;\\n    var feature;\\n    var aliasIdx;\\n    var result;\\n    var nameIdx;\\n    var featureName;\\n    var featureNameSplit;\\n\\n    for (var featureIdx in tests) {\\n      if (tests.hasOwnProperty(featureIdx)) {\\n        featureNames = [];\\n        feature = tests[featureIdx];\\n        // run the test, throw the return value into the Modernizr,\\n        // then based on that boolean, define an appropriate className\\n        // and push it into an array of classes we'll join later.\\n        //\\n        // If there is no name, it's an 'async' test that is run,\\n        // but not directly added to the object. That should\\n        // be done with a post-run addTest call.\\n        if (feature.name) {\\n          featureNames.push(feature.name.toLowerCase());\\n\\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\\n            // Add all the aliases into the names list\\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\\n            }\\n          }\\n        }\\n\\n        // Run the test, or use the raw value if it's not a function\\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\\n\\n        // Set each of the names on the Modernizr object\\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\\n          featureName = featureNames[nameIdx];\\n          // Support dot properties as sub tests. We don't do checking to make sure\\n          // that the implied parent tests have been added. You must call them in\\n          // order (either in the test, or make the parent test a dependency).\\n          //\\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\\n          // hashtag famous last words\\n          featureNameSplit = featureName.split('.');\\n\\n          if (featureNameSplit.length === 1) {\\n            Modernizr[featureNameSplit[0]] = result;\\n          } else {\\n            // cast to a Boolean, if not one already\\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\\n            }\\n\\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\\n          }\\n\\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\\n        }\\n      }\\n    }\\n  }\\n  ;\\n\\n  /**\\n   * List of property values to set for css tests. See ticket #21\\n   * http://git.io/vUGl4\\n   *\\n   * @memberof Modernizr\\n   * @name Modernizr._prefixes\\n   * @optionName Modernizr._prefixes\\n   * @optionProp prefixes\\n   * @access public\\n   * @example\\n   *\\n   * Modernizr._prefixes is the internal list of prefixes that we test against\\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\\n   * an array of kebab-case vendor prefixes you can use within your code.\\n   *\\n   * Some common use cases include\\n   *\\n   * Generating all possible prefixed version of a CSS property\\n   * ```js\\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\\n   *\\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\\n   * ```\\n   *\\n   * Generating all possible prefixed version of a CSS value\\n   * ```js\\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\\n   *\\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\\n   * ```\\n   */\\n\\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\\n  // values in feature detects to continue to work\\n  var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['', ''];\\n\\n  // expose these for the plugin API. Look in the source for how to join() them against your input\\n  ModernizrProto._prefixes = prefixes;\\n\\n  /**\\n   * docElement is a convenience wrapper to grab the root element of the document\\n   *\\n   * @access private\\n   * @returns {HTMLElement|SVGElement} The root element of the document\\n   */\\n\\n  var docElement = document.documentElement;\\n\\n  /**\\n   * A convenience helper to check if the document we are running in is an SVG document\\n   *\\n   * @access private\\n   * @returns {boolean}\\n   */\\n\\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\\n\\n  /**\\n   * createElement is a convenience wrapper around document.createElement. Since we\\n   * use createElement all over the place, this allows for (slightly) smaller code\\n   * as well as abstracting away issues with creating elements in contexts other than\\n   * HTML documents (e.g. SVG documents).\\n   *\\n   * @access private\\n   * @function createElement\\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\\n   */\\n\\n  function createElement() {\\n    if (typeof document.createElement !== 'function') {\\n      // This is the case in IE7, where the type of createElement is \\\"object\\\".\\n      // For this reason, we cannot call apply() as Object is not a Function.\\n      return document.createElement(arguments[0]);\\n    } else if (isSVG) {\\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\\n    } else {\\n      return document.createElement.apply(document, arguments);\\n    }\\n  }\\n\\n  ;\\n\\n  /**\\n   * getBody returns the body of a document, or an element that can stand in for\\n   * the body if a real body does not exist\\n   *\\n   * @access private\\n   * @function getBody\\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\\n   * artificially created element that stands in for the body\\n   */\\n\\n  function getBody() {\\n    // After page load injecting a fake body doesn't work so check if body exists\\n    var body = document.body;\\n\\n    if (!body) {\\n      // Can't use the real body create a fake one.\\n      body = createElement(isSVG ? 'svg' : 'body');\\n      body.fake = true;\\n    }\\n\\n    return body;\\n  }\\n\\n  ;\\n\\n  /**\\n   * injectElementWithStyles injects an element with style element and some CSS rules\\n   *\\n   * @access private\\n   * @function injectElementWithStyles\\n   * @param {string} rule - String representing a css rule\\n   * @param {function} callback - A function that is used to test the injected element\\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\\n   * @returns {boolean}\\n   */\\n\\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\\n    var mod = 'modernizr';\\n    var style;\\n    var ret;\\n    var node;\\n    var docOverflow;\\n    var div = createElement('div');\\n    var body = getBody();\\n\\n    if (parseInt(nodes, 10)) {\\n      // In order not to give false positives we create a node for each test\\n      // This also allows the method to scale for unspecified uses\\n      while (nodes--) {\\n        node = createElement('div');\\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\\n        div.appendChild(node);\\n      }\\n    }\\n\\n    style = createElement('style');\\n    style.type = 'text/css';\\n    style.id = 's' + mod;\\n\\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\\n    (!body.fake ? div : body).appendChild(style);\\n    body.appendChild(div);\\n\\n    if (style.styleSheet) {\\n      style.styleSheet.cssText = rule;\\n    } else {\\n      style.appendChild(document.createTextNode(rule));\\n    }\\n    div.id = mod;\\n\\n    if (body.fake) {\\n      //avoid crashing IE8, if background image is used\\n      body.style.background = '';\\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\\n      body.style.overflow = 'hidden';\\n      docOverflow = docElement.style.overflow;\\n      docElement.style.overflow = 'hidden';\\n      docElement.appendChild(body);\\n    }\\n\\n    ret = callback(div, rule);\\n    // If this is done after page load we don't want to remove the body so check if body exists\\n    if (body.fake) {\\n      body.parentNode.removeChild(body);\\n      docElement.style.overflow = docOverflow;\\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\\n      // eslint-disable-next-line\\n      docElement.offsetHeight;\\n    } else {\\n      div.parentNode.removeChild(div);\\n    }\\n\\n    return !!ret;\\n  }\\n\\n  ;\\n\\n  /**\\n   * testStyles injects an element with style element and some CSS rules\\n   *\\n   * @memberof Modernizr\\n   * @name Modernizr.testStyles\\n   * @optionName Modernizr.testStyles()\\n   * @optionProp testStyles\\n   * @access public\\n   * @function testStyles\\n   * @param {string} rule - String representing a css rule\\n   * @param {function} callback - A function that is used to test the injected element\\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\\n   * @returns {boolean}\\n   * @example\\n   *\\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\\n   * along with (possibly multiple) DOM elements. This lets you check for features\\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\\n   *\\n   * ```js\\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\\n   *   // elem is the first DOM node in the page (by default #modernizr)\\n   *   // rule is the first argument you supplied - the CSS rule in string form\\n   *\\n   *   addTest('widthworks', elem.style.width === '9px')\\n   * });\\n   * ```\\n   *\\n   * If your test requires multiple nodes, you can include a third argument\\n   * indicating how many additional div elements to include on the page. The\\n   * additional nodes are injected as children of the `elem` that is returned as\\n   * the first argument to the callback.\\n   *\\n   * ```js\\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\\n   *   document.getElementById('modernizr').style.width === '1px'; // true\\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\\n   * }, 1);\\n   * ```\\n   *\\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\\n   * the second additional is `#modernizr3`, etc.).\\n   * If you want to have more meaningful IDs for your function, you can provide\\n   * them as the fourth argument, as an array of strings\\n   *\\n   * ```js\\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\\n   *   elem.firstChild === document.getElementById('foo'); // true\\n   *   elem.lastChild === document.getElementById('bar'); // true\\n   * }, 2, ['foo', 'bar']);\\n   * ```\\n   *\\n   */\\n\\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\\n\\n  /*!\\n  {\\n    \\\"name\\\": \\\"Touch Events\\\",\\n    \\\"property\\\": \\\"touchevents\\\",\\n    \\\"caniuse\\\" : \\\"touch\\\",\\n    \\\"tags\\\": [\\\"media\\\", \\\"attribute\\\"],\\n    \\\"notes\\\": [{\\n      \\\"name\\\": \\\"Touch Events spec\\\",\\n      \\\"href\\\": \\\"https://www.w3.org/TR/2013/WD-touch-events-20130124/\\\"\\n    }],\\n    \\\"warnings\\\": [\\n      \\\"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\\\"\\n    ],\\n    \\\"knownBugs\\\": [\\n      \\\"False-positive on some configurations of Nokia N900\\\",\\n      \\\"False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\\\"\\n    ]\\n  }\\n  !*/\\n  /* DOC\\n  Indicates if the browser supports the W3C Touch Events API.\\n  \\n  This *does not* necessarily reflect a touchscreen device:\\n  \\n  * Older touchscreen devices only emulate mouse events\\n  * Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\\n  * Some browsers & OS setups may enable touch APIs when no touchscreen is connected\\n  * Future browsers may implement other event models for touch interactions\\n  \\n  See this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\\n  \\n  It's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\\n  \\n  This test will also return `true` for Firefox 4 Multitouch support.\\n  */\\n\\n  // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\\n  Modernizr.addTest('touchevents', function () {\\n    var bool;\\n    if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\\n      bool = true;\\n    } else {\\n      // include the 'heartz' as a way to have a non matching MQ to help terminate the join\\n      // https://git.io/vznFH\\n      var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\\n      testStyles(query, function (node) {\\n        bool = node.offsetTop === 9;\\n      });\\n    }\\n    return bool;\\n  });\\n\\n  // Run each test\\n  testRunner();\\n\\n  delete ModernizrProto.addTest;\\n  delete ModernizrProto.addAsyncTest;\\n\\n  // Run the things that are supposed to run after the tests\\n  for (var i = 0; i < Modernizr._q.length; i++) {\\n    Modernizr._q[i]();\\n  }\\n\\n  // Leak Modernizr namespace\\n  window.Modernizr = Modernizr;\\n\\n  ;\\n})(window, document);\"\n\n/***/ }),\n/* 8 */,\n/* 9 */,\n/* 10 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ([{\n  date: '2017/11/01',\n  title: 'NX Network Optix announces Touch Cloud as their formal Video Analytics tech partner',\n  content: '\\n    Touch Cloud has announced AI solution that fully integrated with NX Witness VMS providing the analytics features of real-time objects recognition and classification.\\n    ',\n  link: 'http://www.networkoptix.com/partners/'\n}, {\n  date: '2017/10/24',\n  title: '\\u81F4\\u8302\\u96FB\\u5B50\\u6295\\u8CC7\\u592A\\u5947\\u96F2\\u7AEF',\n  content: '\\n    AI\\u4EBA\\u5DE5\\u667A\\u6167\\u5C07\\u5168\\u9762\\u6EF2\\u900F\\u751F\\u6D3B\\u8207\\u5DE5\\u696D\\u9818\\u57DF\\uFF0C\\u7814\\u7A76\\u6A5F\\u69CBIDC\\u9810\\u4F30\\uFF0C\\u52302020\\u5E74\\uFF0C\\u5168\\u7403AI\\u76F8\\u95DC\\u5546\\u6A5F\\u5C07\\u9054470\\u5104\\u7F8E\\u5143\\u3002\\u81F4\\u8302\\u96FB\\u5B50\\u70BA\\u7CBE\\u5BC6\\u96FB\\u5B50\\u91CF\\u6E2C\\u5100\\u5668\\u3001\\u81EA\\u52D5\\u5316\\u6E2C\\u8A66\\u7CFB\\u7D71\\u3001\\u667A\\u6167\\u88FD\\u9020\\u7CFB\\u7D71\\u8207\\u5168\\u65B9\\u4F4DTurnkey\\u6E2C\\u8A66\\u53CA\\u81EA\\u52D5\\u5316\\u89E3\\u6C7A\\u65B9\\u6848\\u9818\\u5C0E\\u5EE0\\u5546\\uFF0C\\u7A4D\\u6975\\u4F48\\u5C40AI\\uFF0C\\u6295\\u8CC7AI\\u65B0\\u5275\\u516C\\u53F8\\u592A\\u5947\\u96F2\\u7AEF\\uFF0C\\u6210\\u70BA\\u6700\\u5927\\u6CD5\\u4EBA\\u80A1\\u6771\\uFF0C\\u5728\\u539F\\u672C\\u7684\\u95DC\\u9375\\u6280\\u8853\\u88E1\\u6CE8\\u5165AI\\u7684\\u8840\\u6DB2\\uFF0C\\u5275\\u9020\\u81F4\\u8302\\u91CF\\u6E2C\\u8A2D\\u5099\\u8207Turnkey\\u89E3\\u6C7A\\u65B9\\u6848\\u66F4\\u667A\\u6167\\u5316\\u8207\\u66F4\\u9AD8\\u9644\\u52A0\\u50F9\\u503C\\u3002\\n    ',\n  link: 'https://money.udn.com/money/story/9529/2773413'\n}]);\n\n/***/ })\n],[3]);\n\n\n// WEBPACK FOOTER //\n// js/main.8e248d02b99900422445.js","import 'animate.css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport '../main.scss';\r\nimport '@/lib/modernizr.js';\r\nimport 'materialize-css/dist/js/materialize.min.js';\r\nimport 'waypoints/lib/jquery.waypoints.min.js';\r\nimport news from './news.js';\r\n\r\n\r\nwindow.addEventListener('scroll', onWindowScroll);\r\n\r\n// detect mobile device\r\n// If it is mobile, then rewrite the cover background image style \r\n// to 'background-attachment: scroll' because mobile device does not support it.\r\n// see https://stackoverflow.com/a/31445503/8731544\r\nif (Modernizr.touchevents) {\r\n  $('body').addClass('mobile'); \r\n  // console.log('Modernizr', Modernizr);\r\n}\r\n\r\n\r\nvar navbar = $('#main-nav');\r\nvar navbarTop = navbar.offset().top;\r\nvar newsList = $('.news-list');\r\n\r\n// generate news content\r\nfor (var i = 0; i < news.length; i++) {\r\n  var n = news[i];\r\n  // var fadeClass = i % 2 === 0 ? 'wp-fade-in-left' : 'wp-fade-in-right';\r\n  var fadeClass= '';\r\n\r\n  var title = n.link ? `<a href=\"${n.link}\" target=\"_blank\">${n.title}</a>` : n.title;\r\n  var readmore = '';\r\n  if (n.link) {\r\n    readmore = `<a href=\"${n.link}\" rel=\"nofollow\" target=\"_blank\">Read more</a>`;\r\n  }\r\n\r\n  newsList.append(`\r\n    <li class=\"news-item ${fadeClass}\">\r\n      <p>\r\n        <small class=\"date\">\r\n          <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> ${n.date}\r\n        </small>\r\n      </p>\r\n      <h5>${title}</h5>\r\n      <p>${n.content}</p>\r\n      <p>${readmore}</p>\r\n    </li>\r\n  `);\r\n}\r\n\r\n// attach click to toggle mobile navigation menu.\r\n$('.button-collapse').on('click', toggleMobileNavLinks);\r\n$('.mobile-nav-menu li').on('click', toggleMobileNavLinks);\r\n\r\n// attach click event to scroll page smoothly for each anchor element which havae hash href.\r\n$('a[href^=\"#\"]')\r\n  .filter(function(){\r\n    return this.hash.match(/^#.+$/);\r\n  })\r\n  .on('click', function(e) {\r\n    e.preventDefault();\r\n\r\n    var hash = this.hash;\r\n    var targetTop = $(hash).offset().top;\r\n    // targetTop -= navbar.height();\r\n\r\n    $('html, body').stop().animate({\r\n      scrollTop: targetTop\r\n    }, {\r\n      duration: 600,\r\n      easing: 'easeOutCubic',\r\n      start: () => {\r\n      },\r\n      complete: () => {\r\n        window.location.hash = hash;\r\n      }\r\n    });\r\n  });\r\n\r\n// apply scrolling animations\r\napplyWaypointAnimate('.wp-fade-in', 'fadeIn');\r\napplyWaypointAnimate('.wp-fade-in-up', 'fadeInUp');\r\napplyWaypointAnimate('.wp-fade-in-down', 'fadeInDown');\r\napplyWaypointAnimate('.wp-fade-in-left', 'fadeInLeft');\r\napplyWaypointAnimate('.wp-fade-in-right', 'fadeInRight');\r\n\r\n\r\n\r\n// functions----------------------------------------------------------------\r\n\r\nfunction onWindowScroll() {\r\n  var windowWidth = window.innerWidth;\r\n  var body = $('html');\r\n  if ($(window).scrollTop() > navbarTop) {\r\n    navbar.addClass('navbar-fixed');\r\n  } else {\r\n    navbar.removeClass('navbar-fixed');\r\n  }\r\n\r\n  if ($('#mobile-nav').data('toggle')) {\r\n    toggleMobileNavLinks();\r\n  }\r\n}\r\n\r\nfunction applyWaypointAnimate (selector, animateClass, offset) {\r\n  offset = offset || '70%';\r\n  $(selector).waypoint({\r\n    handler: function(direction) {\r\n      $(this.element).addClass('animated ' + animateClass);\r\n    },\r\n    offset: offset\r\n  });\r\n};\r\n\r\nfunction toggleMobileNavLinks(e) {\r\n  if (e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  $('#mobile-nav').stop();\r\n  $('#mobile-nav').slideToggle({\r\n    duration: 200,\r\n    start: function(a) {\r\n      var toggleState = $(this).data('toggle');\r\n      toggleState = toggleState ? false : true;\r\n      $(this).data('toggle', toggleState);\r\n\r\n      var menuIcon = $('.button-collapse > i');\r\n      if (toggleState) {\r\n        menuIcon.text('\\uE5CD');\r\n      } else {\r\n        menuIcon.text('\\uE5D2');\r\n      }\r\n\r\n      if (toggleState && !navbar.hasClass('navbar-fixed')) {\r\n        navbar.addClass('navbar-fixed');\r\n      }\r\n\r\n      if (!toggleState && $(window).scrollTop() <= navbarTop) {\r\n        navbar.removeClass('navbar-fixed');\r\n      }\r\n    }\r\n  }); \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/main/js/main.js","require(\"!!C:\\\\Users\\\\yuska\\\\Documents\\\\workspaces\\\\TouchCloud\\\\touchcloud-landingpage\\\\node_modules\\\\script-loader\\\\addScript.js\")(require(\"!!C:\\\\Users\\\\yuska\\\\Documents\\\\workspaces\\\\TouchCloud\\\\touchcloud-landingpage\\\\node_modules\\\\raw-loader\\\\index.js!C:\\\\Users\\\\yuska\\\\Documents\\\\workspaces\\\\TouchCloud\\\\touchcloud-landingpage\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!C:\\\\Users\\\\yuska\\\\Documents\\\\workspaces\\\\TouchCloud\\\\touchcloud-landingpage\\\\src\\\\lib\\\\modernizr.js\"))\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/modernizr.js\n// module id = 6\n// module chunks = 1","module.exports = \"var _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*!\\n * modernizr v3.5.0\\n * Build https://modernizr.com/download?-touchevents-dontmin\\n *\\n * Copyright (c)\\n *  Faruk Ates\\n *  Paul Irish\\n *  Alex Sexton\\n *  Ryan Seddon\\n *  Patrick Kettner\\n *  Stu Cox\\n *  Richard Herrera\\n\\n * MIT License\\n */\\n\\n/*\\n * Modernizr tests which native CSS3 and HTML5 features are available in the\\n * current UA and makes the results available to you in two ways: as properties on\\n * a global `Modernizr` object, and as classes on the `<html>` element. This\\n * information allows you to progressively enhance your pages with a granular level\\n * of control over the experience.\\n*/\\n\\n;(function (window, document, undefined) {\\n  var tests = [];\\n\\n  /**\\n   *\\n   * ModernizrProto is the constructor for Modernizr\\n   *\\n   * @class\\n   * @access public\\n   */\\n\\n  var ModernizrProto = {\\n    // The current version, dummy\\n    _version: '3.5.0',\\n\\n    // Any settings that don't work as separate modules\\n    // can go in here as configuration.\\n    _config: {\\n      'classPrefix': '',\\n      'enableClasses': true,\\n      'enableJSClass': true,\\n      'usePrefixes': true\\n    },\\n\\n    // Queue of tests\\n    _q: [],\\n\\n    // Stub these for people who are listening\\n    on: function on(test, cb) {\\n      // I don't really think people should do this, but we can\\n      // safe guard it a bit.\\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\\n      // This is in case people listen to synchronous tests. I would leave it out,\\n      // but the code to *disallow* sync tests in the real version of this\\n      // function is actually larger than this.\\n      var self = this;\\n      setTimeout(function () {\\n        cb(self[test]);\\n      }, 0);\\n    },\\n\\n    addTest: function addTest(name, fn, options) {\\n      tests.push({ name: name, fn: fn, options: options });\\n    },\\n\\n    addAsyncTest: function addAsyncTest(fn) {\\n      tests.push({ name: null, fn: fn });\\n    }\\n  };\\n\\n  // Fake some of Object.create so we can force non test results to be non \\\"own\\\" properties.\\n  var Modernizr = function Modernizr() {};\\n  Modernizr.prototype = ModernizrProto;\\n\\n  // Leak modernizr globally when you `require` it rather than force it here.\\n  // Overwrite name so constructor name is nicer :D\\n  Modernizr = new Modernizr();\\n\\n  var classes = [];\\n\\n  /**\\n   * is returns a boolean if the typeof an obj is exactly type.\\n   *\\n   * @access private\\n   * @function is\\n   * @param {*} obj - A thing we want to check the type of\\n   * @param {string} type - A string to compare the typeof against\\n   * @returns {boolean}\\n   */\\n\\n  function is(obj, type) {\\n    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === type;\\n  }\\n  ;\\n\\n  /**\\n   * Run through all tests and detect their support in the current UA.\\n   *\\n   * @access private\\n   */\\n\\n  function testRunner() {\\n    var featureNames;\\n    var feature;\\n    var aliasIdx;\\n    var result;\\n    var nameIdx;\\n    var featureName;\\n    var featureNameSplit;\\n\\n    for (var featureIdx in tests) {\\n      if (tests.hasOwnProperty(featureIdx)) {\\n        featureNames = [];\\n        feature = tests[featureIdx];\\n        // run the test, throw the return value into the Modernizr,\\n        // then based on that boolean, define an appropriate className\\n        // and push it into an array of classes we'll join later.\\n        //\\n        // If there is no name, it's an 'async' test that is run,\\n        // but not directly added to the object. That should\\n        // be done with a post-run addTest call.\\n        if (feature.name) {\\n          featureNames.push(feature.name.toLowerCase());\\n\\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\\n            // Add all the aliases into the names list\\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\\n            }\\n          }\\n        }\\n\\n        // Run the test, or use the raw value if it's not a function\\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\\n\\n        // Set each of the names on the Modernizr object\\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\\n          featureName = featureNames[nameIdx];\\n          // Support dot properties as sub tests. We don't do checking to make sure\\n          // that the implied parent tests have been added. You must call them in\\n          // order (either in the test, or make the parent test a dependency).\\n          //\\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\\n          // hashtag famous last words\\n          featureNameSplit = featureName.split('.');\\n\\n          if (featureNameSplit.length === 1) {\\n            Modernizr[featureNameSplit[0]] = result;\\n          } else {\\n            // cast to a Boolean, if not one already\\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\\n            }\\n\\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\\n          }\\n\\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\\n        }\\n      }\\n    }\\n  }\\n  ;\\n\\n  /**\\n   * List of property values to set for css tests. See ticket #21\\n   * http://git.io/vUGl4\\n   *\\n   * @memberof Modernizr\\n   * @name Modernizr._prefixes\\n   * @optionName Modernizr._prefixes\\n   * @optionProp prefixes\\n   * @access public\\n   * @example\\n   *\\n   * Modernizr._prefixes is the internal list of prefixes that we test against\\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\\n   * an array of kebab-case vendor prefixes you can use within your code.\\n   *\\n   * Some common use cases include\\n   *\\n   * Generating all possible prefixed version of a CSS property\\n   * ```js\\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\\n   *\\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\\n   * ```\\n   *\\n   * Generating all possible prefixed version of a CSS value\\n   * ```js\\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\\n   *\\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\\n   * ```\\n   */\\n\\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\\n  // values in feature detects to continue to work\\n  var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['', ''];\\n\\n  // expose these for the plugin API. Look in the source for how to join() them against your input\\n  ModernizrProto._prefixes = prefixes;\\n\\n  /**\\n   * docElement is a convenience wrapper to grab the root element of the document\\n   *\\n   * @access private\\n   * @returns {HTMLElement|SVGElement} The root element of the document\\n   */\\n\\n  var docElement = document.documentElement;\\n\\n  /**\\n   * A convenience helper to check if the document we are running in is an SVG document\\n   *\\n   * @access private\\n   * @returns {boolean}\\n   */\\n\\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\\n\\n  /**\\n   * createElement is a convenience wrapper around document.createElement. Since we\\n   * use createElement all over the place, this allows for (slightly) smaller code\\n   * as well as abstracting away issues with creating elements in contexts other than\\n   * HTML documents (e.g. SVG documents).\\n   *\\n   * @access private\\n   * @function createElement\\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\\n   */\\n\\n  function createElement() {\\n    if (typeof document.createElement !== 'function') {\\n      // This is the case in IE7, where the type of createElement is \\\"object\\\".\\n      // For this reason, we cannot call apply() as Object is not a Function.\\n      return document.createElement(arguments[0]);\\n    } else if (isSVG) {\\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\\n    } else {\\n      return document.createElement.apply(document, arguments);\\n    }\\n  }\\n\\n  ;\\n\\n  /**\\n   * getBody returns the body of a document, or an element that can stand in for\\n   * the body if a real body does not exist\\n   *\\n   * @access private\\n   * @function getBody\\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\\n   * artificially created element that stands in for the body\\n   */\\n\\n  function getBody() {\\n    // After page load injecting a fake body doesn't work so check if body exists\\n    var body = document.body;\\n\\n    if (!body) {\\n      // Can't use the real body create a fake one.\\n      body = createElement(isSVG ? 'svg' : 'body');\\n      body.fake = true;\\n    }\\n\\n    return body;\\n  }\\n\\n  ;\\n\\n  /**\\n   * injectElementWithStyles injects an element with style element and some CSS rules\\n   *\\n   * @access private\\n   * @function injectElementWithStyles\\n   * @param {string} rule - String representing a css rule\\n   * @param {function} callback - A function that is used to test the injected element\\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\\n   * @returns {boolean}\\n   */\\n\\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\\n    var mod = 'modernizr';\\n    var style;\\n    var ret;\\n    var node;\\n    var docOverflow;\\n    var div = createElement('div');\\n    var body = getBody();\\n\\n    if (parseInt(nodes, 10)) {\\n      // In order not to give false positives we create a node for each test\\n      // This also allows the method to scale for unspecified uses\\n      while (nodes--) {\\n        node = createElement('div');\\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\\n        div.appendChild(node);\\n      }\\n    }\\n\\n    style = createElement('style');\\n    style.type = 'text/css';\\n    style.id = 's' + mod;\\n\\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\\n    (!body.fake ? div : body).appendChild(style);\\n    body.appendChild(div);\\n\\n    if (style.styleSheet) {\\n      style.styleSheet.cssText = rule;\\n    } else {\\n      style.appendChild(document.createTextNode(rule));\\n    }\\n    div.id = mod;\\n\\n    if (body.fake) {\\n      //avoid crashing IE8, if background image is used\\n      body.style.background = '';\\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\\n      body.style.overflow = 'hidden';\\n      docOverflow = docElement.style.overflow;\\n      docElement.style.overflow = 'hidden';\\n      docElement.appendChild(body);\\n    }\\n\\n    ret = callback(div, rule);\\n    // If this is done after page load we don't want to remove the body so check if body exists\\n    if (body.fake) {\\n      body.parentNode.removeChild(body);\\n      docElement.style.overflow = docOverflow;\\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\\n      // eslint-disable-next-line\\n      docElement.offsetHeight;\\n    } else {\\n      div.parentNode.removeChild(div);\\n    }\\n\\n    return !!ret;\\n  }\\n\\n  ;\\n\\n  /**\\n   * testStyles injects an element with style element and some CSS rules\\n   *\\n   * @memberof Modernizr\\n   * @name Modernizr.testStyles\\n   * @optionName Modernizr.testStyles()\\n   * @optionProp testStyles\\n   * @access public\\n   * @function testStyles\\n   * @param {string} rule - String representing a css rule\\n   * @param {function} callback - A function that is used to test the injected element\\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\\n   * @returns {boolean}\\n   * @example\\n   *\\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\\n   * along with (possibly multiple) DOM elements. This lets you check for features\\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\\n   *\\n   * ```js\\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\\n   *   // elem is the first DOM node in the page (by default #modernizr)\\n   *   // rule is the first argument you supplied - the CSS rule in string form\\n   *\\n   *   addTest('widthworks', elem.style.width === '9px')\\n   * });\\n   * ```\\n   *\\n   * If your test requires multiple nodes, you can include a third argument\\n   * indicating how many additional div elements to include on the page. The\\n   * additional nodes are injected as children of the `elem` that is returned as\\n   * the first argument to the callback.\\n   *\\n   * ```js\\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\\n   *   document.getElementById('modernizr').style.width === '1px'; // true\\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\\n   * }, 1);\\n   * ```\\n   *\\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\\n   * the second additional is `#modernizr3`, etc.).\\n   * If you want to have more meaningful IDs for your function, you can provide\\n   * them as the fourth argument, as an array of strings\\n   *\\n   * ```js\\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\\n   *   elem.firstChild === document.getElementById('foo'); // true\\n   *   elem.lastChild === document.getElementById('bar'); // true\\n   * }, 2, ['foo', 'bar']);\\n   * ```\\n   *\\n   */\\n\\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\\n\\n  /*!\\n  {\\n    \\\"name\\\": \\\"Touch Events\\\",\\n    \\\"property\\\": \\\"touchevents\\\",\\n    \\\"caniuse\\\" : \\\"touch\\\",\\n    \\\"tags\\\": [\\\"media\\\", \\\"attribute\\\"],\\n    \\\"notes\\\": [{\\n      \\\"name\\\": \\\"Touch Events spec\\\",\\n      \\\"href\\\": \\\"https://www.w3.org/TR/2013/WD-touch-events-20130124/\\\"\\n    }],\\n    \\\"warnings\\\": [\\n      \\\"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\\\"\\n    ],\\n    \\\"knownBugs\\\": [\\n      \\\"False-positive on some configurations of Nokia N900\\\",\\n      \\\"False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\\\"\\n    ]\\n  }\\n  !*/\\n  /* DOC\\n  Indicates if the browser supports the W3C Touch Events API.\\n  \\n  This *does not* necessarily reflect a touchscreen device:\\n  \\n  * Older touchscreen devices only emulate mouse events\\n  * Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\\n  * Some browsers & OS setups may enable touch APIs when no touchscreen is connected\\n  * Future browsers may implement other event models for touch interactions\\n  \\n  See this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\\n  \\n  It's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\\n  \\n  This test will also return `true` for Firefox 4 Multitouch support.\\n  */\\n\\n  // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\\n  Modernizr.addTest('touchevents', function () {\\n    var bool;\\n    if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\\n      bool = true;\\n    } else {\\n      // include the 'heartz' as a way to have a non matching MQ to help terminate the join\\n      // https://git.io/vznFH\\n      var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\\n      testStyles(query, function (node) {\\n        bool = node.offsetTop === 9;\\n      });\\n    }\\n    return bool;\\n  });\\n\\n  // Run each test\\n  testRunner();\\n\\n  delete ModernizrProto.addTest;\\n  delete ModernizrProto.addAsyncTest;\\n\\n  // Run the things that are supposed to run after the tests\\n  for (var i = 0; i < Modernizr._q.length; i++) {\\n    Modernizr._q[i]();\\n  }\\n\\n  // Leak Modernizr namespace\\n  window.Modernizr = Modernizr;\\n\\n  ;\\n})(window, document);\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./node_modules/babel-loader/lib!./src/lib/modernizr.js\n// module id = 7\n// module chunks = 1","export default [\r\n  {\r\n    date: '2017/11/01',\r\n    title: `NX Network Optix announces Touch Cloud as their formal Video Analytics tech partner`,\r\n    content: `\r\n    Touch Cloud has announced AI solution that fully integrated with NX Witness VMS providing the analytics features of real-time objects recognition and classification.\r\n    `,\r\n    link: 'http://www.networkoptix.com/partners/'\r\n  },\r\n  {\r\n    date: '2017/10/24',\r\n    title: `致茂電子投資太奇雲端`,\r\n    content: `\r\n    AI人工智慧將全面滲透生活與工業領域，研究機構IDC預估，到2020年，全球AI相關商機將達470億美元。致茂電子為精密電子量測儀器、自動化測試系統、智慧製造系統與全方位Turnkey測試及自動化解決方案領導廠商，積極佈局AI，投資AI新創公司太奇雲端，成為最大法人股東，在原本的關鍵技術裡注入AI的血液，創造致茂量測設備與Turnkey解決方案更智慧化與更高附加價值。\r\n    `,\r\n    link: 'https://money.udn.com/money/story/9529/2773413'\r\n  }\r\n];\n\n\n// WEBPACK FOOTER //\n// ./src/pages/main/js/news.js"],"sourceRoot":""}